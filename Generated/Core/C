using System;
using System.Drawing;

using MonoMac.ObjCRuntime;
using MonoMac.Foundation;

namespace Nimbus.Core {

	[BaseType (typeof (NSObject))]
	public partial interface NiaCtions {

		[Export ("initWithTarget:")]
		IntPtr Constructor (NSObject target);

		[Export ("attachToObject:tapBlock:")]
		NSObject AttachToObject ([unmapped: unexposed: Unexposed] object, NIActionBlock action);

		[Export ("attachToObject:detailBlock:")]
		NSObject AttachToObject ([unmapped: unexposed: Unexposed] object, NIActionBlock action);

		[Export ("attachToObject:navigationBlock:")]
		NSObject AttachToObject ([unmapped: unexposed: Unexposed] object, NIActionBlock action);

		[Export ("attachToObject:tapSelector:")]
		NSObject AttachToObject ([unmapped: unexposed: Unexposed] object, Selector selector);

		[Export ("attachToObject:detailSelector:")]
		NSObject AttachToObject ([unmapped: unexposed: Unexposed] object, Selector selector);

		[Export ("attachToObject:navigationSelector:")]
		NSObject AttachToObject ([unmapped: unexposed: Unexposed] object, Selector selector);

		[Export ("attachToClass:tapBlock:")]
		void AttachToClass ([unmapped: objcclass: ObjCClass] aClass, NIActionBlock action);

		[Export ("attachToClass:detailBlock:")]
		void AttachToClass ([unmapped: objcclass: ObjCClass] aClass, NIActionBlock action);

		[Export ("attachToClass:navigationBlock:")]
		void AttachToClass ([unmapped: objcclass: ObjCClass] aClass, NIActionBlock action);

		[Export ("attachToClass:tapSelector:")]
		void AttachToClass ([unmapped: objcclass: ObjCClass] aClass, Selector selector);

		[Export ("attachToClass:detailSelector:")]
		void AttachToClass ([unmapped: objcclass: ObjCClass] aClass, Selector selector);

		[Export ("attachToClass:navigationSelector:")]
		void AttachToClass ([unmapped: objcclass: ObjCClass] aClass, Selector selector);

		[Export ("isObjectActionable:")]
		bool IsObjectActionable ([unmapped: unexposed: Unexposed] object);

		[Static, Export ("objectFromKeyClass:map:")]
		NSObject ObjectFromKeyClass ([unmapped: objcclass: ObjCClass] keyClass, NSMutableDictionary map);
	}

	[BaseType (typeof (NSObject))]
	public partial interface NioBjectActions {

		[Export ("tapAction")]
		NIActionBlock TapAction { get; set; }

		[Export ("detailAction")]
		NIActionBlock DetailAction { get; set; }

		[Export ("navigateAction")]
		NIActionBlock NavigateAction { get; set; }

		[Export ("tapSelector")]
		Selector TapSelector { get; set; }

		[Export ("detailSelector")]
		Selector DetailSelector { get; set; }

		[Export ("navigateSelector")]
		Selector NavigateSelector { get; set; }
	}

	[Category, BaseType (typeof (NIActions))]
	public partial interface NiaCtions {

		[Export ("target")]
		NSObject Target { get; set; }

		[Export ("actionForObjectOrClassOfObject:")]
		NIObjectActions ActionForObjectOrClassOfObject ([unmapped: unexposed: Unexposed] object);
	}

	[BaseType (typeof (NSObject))]
	public partial interface NilInkedList : NSCopying, NSCoding, NSFastEnumeration {

		[Export ("count")]
		uint Count { get; }

		[Export ("firstObject")]
		NSObject FirstObject { get; }

		[Export ("lastObject")]
		NSObject LastObject { get; }

		[Export ("linkedList")]
		NILinkedList LinkedList { get; }

		[Static, Export ("linkedListWithArray:")]
		NILinkedList LinkedListWithArray (NSObject [] array);

		[Export ("initWithArray:")]
		IntPtr Constructor (NSObject [] anArray);

		[Export ("allObjects")]
		NSObject [] AllObjects { get; }

		[Export ("objectEnumerator")]
		NSEnumerator ObjectEnumerator { get; }

		[Export ("containsObject:")]
		bool ContainsObject (NSObject anObject);

		[Export ("description")]
		string Description { get; }

		[Export ("locationOfObject:")]
		NILinkedListLocation LocationOfObject (NSObject object);

		[Export ("objectAtLocation:")]
		NSObject ObjectAtLocation (NILinkedListLocation location);

		[Export ("removeObjectAtLocation:")]
		void RemoveObjectAtLocation (NILinkedListLocation location);

		[Export ("addObject:")]
		NILinkedListLocation AddObject (NSObject object);

		[Export ("addObjectsFromArray:")]
		void AddObjectsFromArray (NSObject [] array);

		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		[Export ("removeObject:")]
		void RemoveObject (NSObject object);

		[Export ("removeFirstObject")]
		void RemoveFirstObject ();

		[Export ("removeLastObject")]
		void RemoveLastObject ();

		[Field ("NIMaxLogLevel")]
		NSInteger NimAxLogLevel { get; }

		[Field ("NIDebugAssertionsShouldBreak")]
		BOOL NidEbugAssertionsShouldBreak { get; }

		[Field ("NINimbusErrorDomain")]
		NSString NinImbusErrorDomain { get; }

		[Field ("NIImageErrorKey")]
		NSString NiiMageErrorKey { get; }
	}

	public enum NinImbusErrorDomainCode {
		NIImageTooSmall = 1
	}

	[BaseType (typeof (NSObject))]
	public partial interface NimEmoryCache {

		[Export ("initWithCapacity:")]
		IntPtr Constructor (uint capacity);

		[Export ("count")]
		uint Count { get; }

		[Export ("storeObject:withName:")]
		void StoreObject (NSObject object, string name);

		[Export ("storeObject:withName:expiresAfter:")]
		void StoreObject (NSObject object, string name, NSDate expirationDate);

		[Export ("removeObjectWithName:")]
		void RemoveObjectWithName (string name);

		[Export ("removeAllObjectsWithPrefix:")]
		void RemoveAllObjectsWithPrefix (string prefix);

		[Export ("removeAllObjects")]
		void RemoveAllObjects ();

		[Export ("objectWithName:")]
		NSObject ObjectWithName (string name);

		[Export ("containsObjectWithName:")]
		bool ContainsObjectWithName (string name);

		[Export ("dateOfLastAccessWithName:")]
		NSDate DateOfLastAccessWithName (string name);

		[Export ("nameOfLeastRecentlyUsedObject")]
		string NameOfLeastRecentlyUsedObject { get; }

		[Export ("nameOfMostRecentlyUsedObject")]
		string NameOfMostRecentlyUsedObject { get; }

		[Export ("reduceMemoryUsage")]
		void ReduceMemoryUsage ();

		[Export ("willSetObject:withName:previousObject:")]
		bool WillSetObject (NSObject object, string name, NSObject previousObject);

		[Export ("didSetObject:withName:")]
		void DidSetObject (NSObject object, string name);

		[Export ("willRemoveObject:withName:")]
		void WillRemoveObject (NSObject object, string name);
	}

	[BaseType (typeof (NIMemoryCache))]
	public partial interface NiiMageMemoryCache {

		[Export ("numberOfPixels")]
		uint NumberOfPixels { get; }

		[Export ("maxNumberOfPixels")]
		uint MaxNumberOfPixels { get; set; }

		[Export ("maxNumberOfPixelsUnderStress")]
		uint MaxNumberOfPixelsUnderStress { get; set; }
	}

	[BaseType (typeof (NSObject))]
	public partial interface NinAvigationAppearance {

		[Static, Export ("pushAppearanceForNavigationController:")]
		void PushAppearanceForNavigationController (UINavigationController navigationController);

		[Static, Export ("popAppearanceForNavigationController:animated:")]
		void PopAppearanceForNavigationController (UINavigationController navigationController, bool animated);

		[Export ("count")]
		int Count { get; }

		[Static, Export ("clear")]
		void Clear ();
	}

	[BaseType (typeof (NSOperation))]
	public partial interface NioPeration {

		[Export ("delegate")]
		[unmapped: unexposed: Unexposed] Delegate { get; set; }

		[Export ("lastError")]
		NSError LastError { get; }

		[Export ("tag")]
		int Tag { get; set; }

		[Export ("didStartBlock")]
		NIOperationBlock DidStartBlock { get; set; }

		[Export ("didFinishBlock")]
		NIOperationBlock DidFinishBlock { get; set; }

		[Export ("didFailWithErrorBlock")]
		NIOperationDidFailBlock DidFailWithErrorBlock { get; set; }

		[Export ("willFinishBlock")]
		NIOperationBlock WillFinishBlock { get; set; }

		[Export ("didStart")]
		void DidStart ();

		[Export ("didFinish")]
		void DidFinish ();

		[Export ("didFailWithError:")]
		void DidFailWithError (NSError error);

		[Export ("willFinish")]
		void WillFinish ();
	}

	[Model]
	public partial interface NioPerationDelegate : NSObject {

		[Export ("nimbusOperationDidStart:")]
		void NimbusOperationDidStart (NIOperation operation);

		[Export ("nimbusOperationWillFinish:")]
		void NimbusOperationWillFinish (NIOperation operation);

		[Export ("nimbusOperationDidFinish:")]
		void NimbusOperationDidFinish (NIOperation operation);

		[Export ("nimbusOperationDidFail:withError:")]
		void NimbusOperationDidFail (NIOperation operation, NSError error);
	}

	[BaseType (typeof (NSObject))]
	public partial interface NisNapshotRotation {

		[Export ("initWithDelegate:")]
		IntPtr Constructor ([unmapped: unexposed: Unexposed] delegate);

		[Export ("delegate")]
		[unmapped: unexposed: Unexposed] Delegate { get; set; }

		[Export ("frameBeforeRotation")]
		RectangleF FrameBeforeRotation { get; }

		[Export ("frameAfterRotation")]
		RectangleF FrameAfterRotation { get; }

		[Export ("willRotateToInterfaceOrientation:duration:")]
		void WillRotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation, double duration);

		[Export ("willAnimateRotationToInterfaceOrientation:duration:")]
		void WillAnimateRotationToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation, double duration);

		[Export ("didRotateFromInterfaceOrientation:")]
		void DidRotateFromInterfaceOrientation (UIInterfaceOrientation fromInterfaceOrientation);
	}

	[Model]
	public partial interface NisNapshotRotationDelegate : NSObject {

		[Export ("containerViewForSnapshotRotation:")]
		UIView ContainerViewForSnapshotRotation (NISnapshotRotation snapshotRotation);

		[Export ("rotatingViewForSnapshotRotation:")]
		UIView RotatingViewForSnapshotRotation (NISnapshotRotation snapshotRotation);

		[Export ("fixedInsetsForSnapshotRotation:")]
		UIEdgeInsets FixedInsetsForSnapshotRotation (NISnapshotRotation snapshotRotation);
	}

	[BaseType (typeof (NSObject))]
	public partial interface Nimbus {

		[Export ("imageMemoryCache")]
		NIImageMemoryCache ImageMemoryCache { get; set; }

		[Export ("networkOperationQueue")]
		NSOperationQueue NetworkOperationQueue { get; set; }
	}

	[BaseType (typeof (NSObject))]
	public partial interface NivIewRecycler {

		[Export ("dequeueReusableViewWithIdentifier:")]
		[unmapped: unexposed: Unexposed] DequeueReusableViewWithIdentifier (string reuseIdentifier);

		[Export ("recycleView:")]
		void RecycleView ([unmapped: unexposed: Unexposed] view);

		[Export ("removeAllViews")]
		void RemoveAllViews ();
	}

	[Model]
	public partial interface NirEcyclableView : NSObject {

		[Export ("reuseIdentifier")]
		string ReuseIdentifier { get; set; }

		[Export ("prepareForReuse")]
		void PrepareForReuse ();
	}

	[BaseType (typeof (UIView))]
	public partial interface NirEcyclableView : NIRecyclableView {

		[Export ("initWithReuseIdentifier:")]
		IntPtr Constructor (string reuseIdentifier);

		[Export ("reuseIdentifier")]
		string ReuseIdentifier { get; set; }
	}

	[Category, BaseType (typeof (NSString))]
	public partial interface NimbusCoreNssTring {

		[Export ("heightWithFont:constrainedToWidth:lineBreakMode:")]
		float HeightWithFont (UIFont font, float width, NSLineBreakMode lineBreakMode);

		[Export ("queryContentsUsingEncoding:")]
		NSDictionary QueryContentsUsingEncoding (NSStringEncoding encoding);

		[Export ("stringByAddingPercentEscapesForURLParameter")]
		string StringByAddingPercentEscapesForUrlpArameter { get; }

		[Export ("stringByAddingQueryDictionary:")]
		string StringByAddingQueryDictionary (NSDictionary query);

		[Export ("versionStringCompare:")]
		NSComparisonResult VersionStringCompare (string other);

		[Export ("md5Hash")]
		string Md5Hash { get; }

		[Export ("sha1Hash")]
		string Sha1Hash { get; }
	}
}
